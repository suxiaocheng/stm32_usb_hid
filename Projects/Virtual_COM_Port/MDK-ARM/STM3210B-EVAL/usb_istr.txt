; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\STM3210B-EVAL\usb_istr.o --depend=.\STM3210B-EVAL\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL --omf_browse=.\STM3210B-EVAL\usb_istr.crf ..\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;76     *******************************************************************************/
;;;77     void USB_Istr(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;78     {
;;;79         uint32_t i=0;
;;;80      __IO uint32_t EP[8];
;;;81       
;;;82       wIstr = _GetISTR();
000004  4d50              LDR      r5,|L1.328|
000006  b088              SUB      sp,sp,#0x20           ;78
000008  f8d50c44          LDR      r0,[r5,#0xc44]
00000c  2400              MOVS     r4,#0                 ;79
00000e  4e4f              LDR      r6,|L1.332|
000010  8070              STRH     r0,[r6,#2]
;;;83     
;;;84     #if (IMR_MSK & ISTR_SOF)
;;;85       if (wIstr & ISTR_SOF & wInterrupt_Mask)
000012  8870              LDRH     r0,[r6,#2]  ; wIstr
000014  4f4e              LDR      r7,|L1.336|
000016  8839              LDRH     r1,[r7,#0]  ; wInterrupt_Mask
000018  4008              ANDS     r0,r0,r1
00001a  0580              LSLS     r0,r0,#22
00001c  d508              BPL      |L1.48|
;;;86       {
;;;87         _SetISTR((uint16_t)CLR_SOF);
00001e  f64f50ff          MOV      r0,#0xfdff
000022  f8c50c44          STR      r0,[r5,#0xc44]
;;;88         bIntPackSOF++;
000026  7830              LDRB     r0,[r6,#0]  ; bIntPackSOF
000028  1c40              ADDS     r0,r0,#1
00002a  7030              STRB     r0,[r6,#0]
;;;89     
;;;90     #ifdef SOF_CALLBACK
;;;91         SOF_Callback();
00002c  f7fffffe          BL       SOF_Callback
                  |L1.48|
;;;92     #endif
;;;93       }
;;;94     #endif
;;;95       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
;;;96       
;;;97     #if (IMR_MSK & ISTR_CTR)
;;;98       if (wIstr & ISTR_CTR & wInterrupt_Mask)
000030  8870              LDRH     r0,[r6,#2]  ; wIstr
000032  8839              LDRH     r1,[r7,#0]  ; wInterrupt_Mask
000034  4008              ANDS     r0,r0,r1
000036  0400              LSLS     r0,r0,#16
000038  d501              BPL      |L1.62|
;;;99       {
;;;100        /* servicing of the endpoint correct transfer interrupt */
;;;101        /* clear of the CTR flag into the sub */
;;;102        CTR_LP();
00003a  f7fffffe          BL       CTR_LP
                  |L1.62|
;;;103    #ifdef CTR_CALLBACK
;;;104        CTR_Callback();
;;;105    #endif
;;;106      }
;;;107    #endif
;;;108      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
;;;109    #if (IMR_MSK & ISTR_RESET)
;;;110      if (wIstr & ISTR_RESET & wInterrupt_Mask)
00003e  8870              LDRH     r0,[r6,#2]  ; wIstr
000040  8839              LDRH     r1,[r7,#0]  ; wInterrupt_Mask
;;;111      {
;;;112        _SetISTR((uint16_t)CLR_RESET);
000042  f64f38ff          MOV      r8,#0xfbff
000046  4008              ANDS     r0,r0,r1              ;110
000048  0540              LSLS     r0,r0,#21             ;110
00004a  d504              BPL      |L1.86|
00004c  f8c58c44          STR      r8,[r5,#0xc44]
;;;113        Device_Property.Reset();
000050  4840              LDR      r0,|L1.340|
000052  6840              LDR      r0,[r0,#4]  ; Device_Property
000054  4780              BLX      r0
                  |L1.86|
;;;114    #ifdef RESET_CALLBACK
;;;115        RESET_Callback();
;;;116    #endif
;;;117      }
;;;118    #endif
;;;119      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;120    #if (IMR_MSK & ISTR_DOVR)
;;;121      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;122      {
;;;123        _SetISTR((uint16_t)CLR_DOVR);
;;;124    #ifdef DOVR_CALLBACK
;;;125        DOVR_Callback();
;;;126    #endif
;;;127      }
;;;128    #endif
;;;129      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;130    #if (IMR_MSK & ISTR_ERR)
;;;131      if (wIstr & ISTR_ERR & wInterrupt_Mask)
000056  8871              LDRH     r1,[r6,#2]  ; wIstr
000058  8838              LDRH     r0,[r7,#0]  ; wInterrupt_Mask
00005a  4001              ANDS     r1,r1,r0
00005c  0489              LSLS     r1,r1,#18
00005e  d503              BPL      |L1.104|
;;;132      {
;;;133        _SetISTR((uint16_t)CLR_ERR);
000060  f64d71ff          MOV      r1,#0xdfff
000064  f8c51c44          STR      r1,[r5,#0xc44]
                  |L1.104|
;;;134    #ifdef ERR_CALLBACK
;;;135        ERR_Callback();
;;;136    #endif
;;;137      }
;;;138    #endif
;;;139      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;140    #if (IMR_MSK & ISTR_WKUP)
;;;141      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
000068  8871              LDRH     r1,[r6,#2]  ; wIstr
00006a  4001              ANDS     r1,r1,r0
00006c  04c8              LSLS     r0,r1,#19
00006e  d506              BPL      |L1.126|
;;;142      {
;;;143        _SetISTR((uint16_t)CLR_WKUP);
000070  f64e70ff          MOV      r0,#0xefff
000074  f8c50c44          STR      r0,[r5,#0xc44]
;;;144        Resume(RESUME_EXTERNAL);
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       Resume
                  |L1.126|
;;;145    #ifdef WKUP_CALLBACK
;;;146        WKUP_Callback();
;;;147    #endif
;;;148      }
;;;149    #endif
;;;150      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;151    #if (IMR_MSK & ISTR_SUSP)
;;;152      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
00007e  8870              LDRH     r0,[r6,#2]  ; wIstr
000080  8839              LDRH     r1,[r7,#0]  ; wInterrupt_Mask
000082  4008              ANDS     r0,r0,r1
000084  0500              LSLS     r0,r0,#20
000086  d50c              BPL      |L1.162|
;;;153      {
;;;154    
;;;155        /* check if SUSPEND is possible */
;;;156        if (fSuspendEnabled)
000088  4833              LDR      r0,|L1.344|
00008a  7800              LDRB     r0,[r0,#0]  ; fSuspendEnabled
00008c  b110              CBZ      r0,|L1.148|
;;;157        {
;;;158          Suspend();
00008e  f7fffffe          BL       Suspend
000092  e002              B        |L1.154|
                  |L1.148|
;;;159        }
;;;160        else
;;;161        {
;;;162          /* if not possible then resume after xx ms */
;;;163          Resume(RESUME_LATER);
000094  2002              MOVS     r0,#2
000096  f7fffffe          BL       Resume
                  |L1.154|
;;;164        }
;;;165        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;166        _SetISTR((uint16_t)CLR_SUSP);
00009a  f24f70ff          MOV      r0,#0xf7ff
00009e  f8c50c44          STR      r0,[r5,#0xc44]
                  |L1.162|
;;;167    #ifdef SUSP_CALLBACK
;;;168        SUSP_Callback();
;;;169    #endif
;;;170      }
;;;171    #endif
;;;172      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;173    
;;;174    #if (IMR_MSK & ISTR_ESOF)
;;;175      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
0000a2  8870              LDRH     r0,[r6,#2]  ; wIstr
0000a4  8839              LDRH     r1,[r7,#0]  ; wInterrupt_Mask
0000a6  4008              ANDS     r0,r0,r1
0000a8  05c0              LSLS     r0,r0,#23
0000aa  d54a              BPL      |L1.322|
;;;176      {
;;;177        /* clear ESOF flag in ISTR */
;;;178        _SetISTR((uint16_t)CLR_ESOF);
0000ac  f64f60ff          MOV      r0,#0xfeff
0000b0  f8c50c44          STR      r0,[r5,#0xc44]
;;;179        
;;;180        if ((_GetFNR()&FNR_RXDP)!=0)
0000b4  f8d50c48          LDR      r0,[r5,#0xc48]
0000b8  2200              MOVS     r2,#0                 ;79
0000ba  0400              LSLS     r0,r0,#16
0000bc  d53a              BPL      |L1.308|
;;;181        {
;;;182          /* increment ESOF counter */
;;;183          esof_counter ++;
0000be  6870              LDR      r0,[r6,#4]  ; esof_counter
0000c0  1c40              ADDS     r0,r0,#1
0000c2  6070              STR      r0,[r6,#4]  ; esof_counter
;;;184          
;;;185          /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
;;;186          if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
0000c4  6870              LDR      r0,[r6,#4]  ; esof_counter
0000c6  2803              CMP      r0,#3
0000c8  d935              BLS      |L1.310|
0000ca  f8d50c40          LDR      r0,[r5,#0xc40]
0000ce  0700              LSLS     r0,r0,#28
0000d0  d431              BMI      |L1.310|
;;;187          {           
;;;188            /* this a sequence to apply a force RESET*/
;;;189          
;;;190            /*Store CNTR value */
;;;191            wCNTR = _GetCNTR(); 
0000d2  f8d50c40          LDR      r0,[r5,#0xc40]
0000d6  b280              UXTH     r0,r0
0000d8  60b0              STR      r0,[r6,#8]  ; wCNTR
0000da  4669              MOV      r1,sp                 ;80
                  |L1.220|
;;;192          
;;;193            /*Store endpoints registers status */
;;;194            for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
0000dc  eb050084          ADD      r0,r5,r4,LSL #2
0000e0  f8d00c00          LDR      r0,[r0,#0xc00]
0000e4  b280              UXTH     r0,r0
0000e6  f8410024          STR      r0,[r1,r4,LSL #2]
0000ea  1c64              ADDS     r4,r4,#1
0000ec  2c08              CMP      r4,#8
0000ee  d3f5              BCC      |L1.220|
;;;195          
;;;196            /*apply FRES */
;;;197            wCNTR|=CNTR_FRES;
0000f0  68b0              LDR      r0,[r6,#8]  ; wCNTR
0000f2  f0400001          ORR      r0,r0,#1
0000f6  60b0              STR      r0,[r6,#8]  ; wCNTR
;;;198            _SetCNTR(wCNTR);
0000f8  68b0              LDR      r0,[r6,#8]  ; wCNTR
0000fa  b280              UXTH     r0,r0
0000fc  f8c50c40          STR      r0,[r5,#0xc40]
;;;199     
;;;200            /*clear FRES*/
;;;201            wCNTR&=~CNTR_FRES;
000100  68b0              LDR      r0,[r6,#8]  ; wCNTR
000102  f0200001          BIC      r0,r0,#1
000106  60b0              STR      r0,[r6,#8]  ; wCNTR
;;;202            _SetCNTR(wCNTR);
000108  68b0              LDR      r0,[r6,#8]  ; wCNTR
00010a  b280              UXTH     r0,r0
00010c  f8c50c40          STR      r0,[r5,#0xc40]
                  |L1.272|
;;;203          
;;;204            /*poll for RESET flag in ISTR*/
;;;205            while((_GetISTR()&ISTR_RESET) == 0);
000110  f8d50c44          LDR      r0,[r5,#0xc44]
000114  0540              LSLS     r0,r0,#21
000116  d5fb              BPL      |L1.272|
;;;206      
;;;207            /* clear RESET flag in ISTR */
;;;208            _SetISTR((uint16_t)CLR_RESET);
000118  f8c58c44          STR      r8,[r5,#0xc44]
;;;209       
;;;210           /*restore Enpoints*/
;;;211            for (i=0;i<8;i++)
00011c  f05f0000          MOVS.W   r0,#0
                  |L1.288|
;;;212            _SetENDPOINT(i, EP[i]);
000120  f8513020          LDR      r3,[r1,r0,LSL #2]
000124  eb050480          ADD      r4,r5,r0,LSL #2
000128  b29b              UXTH     r3,r3
00012a  f8c43c00          STR      r3,[r4,#0xc00]
00012e  1c40              ADDS     r0,r0,#1              ;211
000130  2808              CMP      r0,#8                 ;211
000132  d3f5              BCC      |L1.288|
                  |L1.308|
;;;213          
;;;214            esof_counter = 0;
000134  6072              STR      r2,[r6,#4]  ; esof_counter
                  |L1.310|
;;;215          }
;;;216        }
;;;217        else
;;;218        {
;;;219            esof_counter = 0;
;;;220        }
;;;221        
;;;222        /* resume handling timing is made with ESOFs */
;;;223        Resume(RESUME_ESOF); /* request without change of the machine state */
000136  b008              ADD      sp,sp,#0x20
000138  e8bd41f0          POP      {r4-r8,lr}
00013c  2007              MOVS     r0,#7
00013e  f7ffbffe          B.W      Resume
                  |L1.322|
;;;224    
;;;225    #ifdef ESOF_CALLBACK
;;;226        ESOF_Callback();
;;;227    #endif
;;;228      }
;;;229    #endif
;;;230    } /* USB_Istr */
000142  b008              ADD      sp,sp,#0x20
000144  e8bd81f0          POP      {r4-r8,pc}
;;;231    
                          ENDP

                  |L1.328|
                          DCD      0x40005000
                  |L1.332|
                          DCD      ||.data||
                  |L1.336|
                          DCD      wInterrupt_Mask
                  |L1.340|
                          DCD      Device_Property
                  |L1.344|
                          DCD      fSuspendEnabled

                          AREA ||.data||, DATA, ALIGN=2

                  bIntPackSOF
000000  0000              DCB      0x00,0x00
                  wIstr
000002  0000              DCB      0x00,0x00
                  esof_counter
                          DCD      0x00000000
                  wCNTR
                          DCD      0x00000000

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      EP3_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
