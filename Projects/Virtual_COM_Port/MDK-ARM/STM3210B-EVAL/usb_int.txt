; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\STM3210B-EVAL\usb_int.o --depend=.\STM3210B-EVAL\usb_int.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL --omf_browse=.\STM3210B-EVAL\usb_int.crf ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_int.c]
                          THUMB

                          AREA ||i.CTR_HP||, CODE, READONLY, ALIGN=2

                  CTR_HP PROC
;;;160    *******************************************************************************/
;;;161    void CTR_HP(void)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
;;;163      uint32_t wEPVal = 0;
;;;164    
;;;165      while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;166      {
;;;167        _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
;;;168        /* extract highest priority endpoint number */
;;;169        EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
000002  4c1b              LDR      r4,|L1.112|
000004  4d1b              LDR      r5,|L1.116|
000006  4e1c              LDR      r6,|L1.120|
000008  e02b              B        |L1.98|
00000a  bf00              NOP                            ;167
                  |L1.12|
00000c  f64770ff          MOV      r0,#0x7fff            ;167
000010  f8c50c44          STR      r0,[r5,#0xc44]        ;167
000014  8830              LDRH     r0,[r6,#0]  ; wIstr
000016  f000000f          AND      r0,r0,#0xf
00001a  7020              STRB     r0,[r4,#0]
;;;170        /* process related endpoint register */
;;;171        wEPVal = _GetENDPOINT(EPindex);
00001c  b2c0              UXTB     r0,r0
00001e  eb050080          ADD      r0,r5,r0,LSL #2
000022  f8d01c00          LDR      r1,[r0,#0xc00]
000026  b289              UXTH     r1,r1
;;;172        if ((wEPVal & EP_CTR_RX) != 0)
000028  040a              LSLS     r2,r1,#16
00002a  d509              BPL      |L1.64|
;;;173        {
;;;174          /* clear int flag */
;;;175          _ClearEP_CTR_RX(EPindex);
00002c  f8d01c00          LDR      r1,[r0,#0xc00]
000030  f640728f          MOV      r2,#0xf8f
000034  b289              UXTH     r1,r1
000036  4011              ANDS     r1,r1,r2
000038  f8c01c00          STR      r1,[r0,#0xc00]
;;;176    
;;;177          /* call OUT service function */
;;;178          (*pEpInt_OUT[EPindex-1])();
00003c  480f              LDR      r0,|L1.124|
00003e  e00a              B        |L1.86|
                  |L1.64|
;;;179    
;;;180        } /* if((wEPVal & EP_CTR_RX) */
;;;181        else if ((wEPVal & EP_CTR_TX) != 0)
000040  0609              LSLS     r1,r1,#24
000042  d50e              BPL      |L1.98|
;;;182        {
;;;183          /* clear int flag */
;;;184          _ClearEP_CTR_TX(EPindex);
000044  f8d01c00          LDR      r1,[r0,#0xc00]
000048  f648720f          MOV      r2,#0x8f0f
00004c  b289              UXTH     r1,r1
00004e  4011              ANDS     r1,r1,r2
000050  f8c01c00          STR      r1,[r0,#0xc00]
;;;185    
;;;186          /* call IN service function */
;;;187          (*pEpInt_IN[EPindex-1])();
000054  480a              LDR      r0,|L1.128|
                  |L1.86|
000056  7821              LDRB     r1,[r4,#0]  ; EPindex
000058  eb000081          ADD      r0,r0,r1,LSL #2
00005c  f8500c04          LDR      r0,[r0,#-4]
000060  4780              BLX      r0
                  |L1.98|
000062  f8d50c44          LDR      r0,[r5,#0xc44]        ;165
000066  8030              STRH     r0,[r6,#0]            ;165
000068  0400              LSLS     r0,r0,#16             ;165
00006a  d4cf              BMI      |L1.12|
;;;188    
;;;189    
;;;190        } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;191    
;;;192      }/* while(...) */
;;;193    }
00006c  bd70              POP      {r4-r6,pc}
;;;194    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      EPindex
                  |L1.116|
                          DCD      0x40005000
                  |L1.120|
                          DCD      wIstr
                  |L1.124|
                          DCD      pEpInt_OUT
                  |L1.128|
                          DCD      pEpInt_IN

                          AREA ||i.CTR_LP||, CODE, READONLY, ALIGN=2

                  CTR_LP PROC
;;;52     *******************************************************************************/
;;;53     void CTR_LP(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;54     {
;;;55       __IO uint16_t wEPVal = 0;
;;;56       /* stay in loop while pending interrupts */
;;;57       while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;58       {
;;;59         /* extract highest priority endpoint number */
;;;60         EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
;;;61         if (EPindex == 0)
;;;62         {
;;;63           /* Decode and service control endpoint interrupt */
;;;64           /* calling related service routine */
;;;65           /* (Setup0_Process, In0_Process, Out0_Process) */
;;;66     
;;;67           /* save RX & TX status */
;;;68           /* and set both to NAK */
;;;69           
;;;70     	    SaveRState = _GetENDPOINT(ENDP0);
;;;71     	    SaveTState = SaveRState & EPTX_STAT;
;;;72     	    SaveRState &=  EPRX_STAT;	
;;;73     
;;;74     	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
000004  f64b78bf          MOV      r8,#0xbfbf
000008  f2480980          MOV      r9,#0x8080
00000c  4f4e              LDR      r7,|L2.328|
;;;75     
;;;76           /* DIR bit = origin of the interrupt */
;;;77     
;;;78           if ((wIstr & ISTR_DIR) == 0)
;;;79           {
;;;80             /* DIR = 0 */
;;;81     
;;;82             /* DIR = 0      => IN  int */
;;;83             /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
;;;84     
;;;85             _ClearEP_CTR_TX(ENDP0);
;;;86             In0_Process();
;;;87     
;;;88                /* before terminate set Tx & Rx status */
;;;89     
;;;90                 _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;91     		  return;
;;;92           }
;;;93           else
;;;94           {
;;;95             /* DIR = 1 */
;;;96     
;;;97             /* DIR = 1 & CTR_RX       => SETUP or OUT int */
;;;98             /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
;;;99     
;;;100            wEPVal = _GetENDPOINT(ENDP0);
;;;101            
;;;102            if ((wEPVal &EP_SETUP) != 0)
;;;103            {
;;;104              _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
00000e  f6407a8f          MOV      r10,#0xf8f
000012  4e4e              LDR      r6,|L2.332|
000014  f6487b0f          MOV      r11,#0x8f0f           ;85
000018  4d4d              LDR      r5,|L2.336|
00001a  e08d              B        |L2.312|
                  |L2.28|
00001c  8808              LDRH     r0,[r1,#0]            ;60  ; wIstr
00001e  f000000f          AND      r0,r0,#0xf            ;60
000022  7030              STRB     r0,[r6,#0]            ;60
000024  b2c0              UXTB     r0,r0                 ;61
000026  2800              CMP      r0,#0                 ;61
000028  d15e              BNE      |L2.232|
00002a  f8d50c00          LDR      r0,[r5,#0xc00]        ;70
00002e  8038              STRH     r0,[r7,#0]            ;70
000030  8838              LDRH     r0,[r7,#0]            ;71  ; SaveRState
000032  f0000030          AND      r0,r0,#0x30           ;71
000036  8078              STRH     r0,[r7,#2]            ;71
000038  8838              LDRH     r0,[r7,#0]            ;72  ; SaveRState
00003a  f4005040          AND      r0,r0,#0x3000         ;72
00003e  8038              STRH     r0,[r7,#0]            ;72
000040  f8d50c00          LDR      r0,[r5,#0xc00]        ;74
000044  b280              UXTH     r0,r0                 ;74
000046  ea000008          AND      r0,r0,r8              ;74
00004a  f4805000          EOR      r0,r0,#0x2000         ;74
00004e  f0800020          EOR      r0,r0,#0x20           ;74
000052  ea400009          ORR      r0,r0,r9              ;74
000056  f8c50c00          STR      r0,[r5,#0xc00]        ;74
00005a  8808              LDRH     r0,[r1,#0]            ;78  ; wIstr
00005c  06c0              LSLS     r0,r0,#27             ;78
00005e  f8d50c00          LDR      r0,[r5,#0xc00]        ;85
000062  d41b              BMI      |L2.156|
000064  b281              UXTH     r1,r0                 ;85
000066  ea01010b          AND      r1,r1,r11             ;85
00006a  f8c51c00          STR      r1,[r5,#0xc00]        ;85
00006e  f7fffffe          BL       In0_Process
000072  e02b              B        |L2.204|
                  |L2.116|
000074  8839              LDRH     r1,[r7,#0]            ;90  ; SaveRState
000076  0489              LSLS     r1,r1,#18             ;90
000078  d501              BPL      |L2.126|
00007a  f4805000          EOR      r0,r0,#0x2000         ;90
                  |L2.126|
;;;105              Setup0_Process();
;;;106              /* before terminate set Tx & Rx status */
;;;107    
;;;108    		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
;;;109              return;
;;;110            }
;;;111    
;;;112            else if ((wEPVal & EP_CTR_RX) != 0)
;;;113            {
;;;114              _ClearEP_CTR_RX(ENDP0);
;;;115              Out0_Process();
;;;116              /* before terminate set Tx & Rx status */
;;;117         
;;;118    		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
00007e  8879              LDRH     r1,[r7,#2]  ; SaveTState
000080  06c9              LSLS     r1,r1,#27
000082  d42e              BMI      |L2.226|
                  |L2.132|
000084  8879              LDRH     r1,[r7,#2]            ;90  ; SaveTState
000086  0689              LSLS     r1,r1,#26             ;90
000088  d501              BPL      |L2.142|
00008a  f0800020          EOR      r0,r0,#0x20           ;90
                  |L2.142|
00008e  b280              UXTH     r0,r0
000090  ea400009          ORR      r0,r0,r9
000094  f8c50c00          STR      r0,[r5,#0xc00]
                  |L2.152|
;;;119              return;
;;;120            }
;;;121          }
;;;122        }/* if(EPindex == 0) */
;;;123        else
;;;124        {
;;;125          /* Decode and service non control endpoints interrupt  */
;;;126    
;;;127          /* process related endpoint register */
;;;128          wEPVal = _GetENDPOINT(EPindex);
;;;129          if ((wEPVal & EP_CTR_RX) != 0)
;;;130          {
;;;131            /* clear int flag */
;;;132            _ClearEP_CTR_RX(EPindex);
;;;133    
;;;134            /* call OUT service function */
;;;135            (*pEpInt_OUT[EPindex-1])();
;;;136    
;;;137          } /* if((wEPVal & EP_CTR_RX) */
;;;138    
;;;139          if ((wEPVal & EP_CTR_TX) != 0)
;;;140          {
;;;141            /* clear int flag */
;;;142            _ClearEP_CTR_TX(EPindex);
;;;143    
;;;144            /* call IN service function */
;;;145            (*pEpInt_IN[EPindex-1])();
;;;146          } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;147    
;;;148        }/* if(EPindex == 0) else */
;;;149    
;;;150      }/* while(...) */
;;;151    }
000098  e8bd9ff0          POP      {r4-r12,pc}
                  |L2.156|
00009c  b280              UXTH     r0,r0                 ;100
00009e  0501              LSLS     r1,r0,#20             ;102
0000a0  d509              BPL      |L2.182|
0000a2  f8d50c00          LDR      r0,[r5,#0xc00]        ;104
0000a6  b280              UXTH     r0,r0                 ;104
0000a8  ea00000a          AND      r0,r0,r10             ;104
0000ac  f8c50c00          STR      r0,[r5,#0xc00]        ;104
0000b0  f7fffffe          BL       Setup0_Process
0000b4  e00a              B        |L2.204|
                  |L2.182|
0000b6  0400              LSLS     r0,r0,#16             ;112
0000b8  d53e              BPL      |L2.312|
0000ba  f8d50c00          LDR      r0,[r5,#0xc00]        ;114
0000be  b280              UXTH     r0,r0                 ;114
0000c0  ea00000a          AND      r0,r0,r10             ;114
0000c4  f8c50c00          STR      r0,[r5,#0xc00]        ;114
0000c8  f7fffffe          BL       Out0_Process
                  |L2.204|
0000cc  f8d50c00          LDR      r0,[r5,#0xc00]        ;118
0000d0  8839              LDRH     r1,[r7,#0]            ;118  ; SaveRState
0000d2  b280              UXTH     r0,r0                 ;118
0000d4  ea000008          AND      r0,r0,r8              ;118
0000d8  04c9              LSLS     r1,r1,#19             ;118
0000da  d5cb              BPL      |L2.116|
0000dc  f4805080          EOR      r0,r0,#0x1000         ;118
0000e0  e7c8              B        |L2.116|
                  |L2.226|
0000e2  f0800010          EOR      r0,r0,#0x10           ;118
0000e6  e7cd              B        |L2.132|
                  |L2.232|
0000e8  eb050080          ADD      r0,r5,r0,LSL #2       ;128
0000ec  f8d01c00          LDR      r1,[r0,#0xc00]        ;128
0000f0  b28c              UXTH     r4,r1                 ;128
0000f2  0421              LSLS     r1,r4,#16             ;129
0000f4  d50d              BPL      |L2.274|
0000f6  f8d01c00          LDR      r1,[r0,#0xc00]        ;132
0000fa  b289              UXTH     r1,r1                 ;132
0000fc  ea01010a          AND      r1,r1,r10             ;132
000100  f8c01c00          STR      r1,[r0,#0xc00]        ;132
000104  4813              LDR      r0,|L2.340|
000106  7831              LDRB     r1,[r6,#0]            ;135  ; EPindex
000108  eb000081          ADD      r0,r0,r1,LSL #2       ;135
00010c  f8500c04          LDR      r0,[r0,#-4]           ;135
000110  4780              BLX      r0                    ;135
                  |L2.274|
000112  0620              LSLS     r0,r4,#24             ;139
000114  d510              BPL      |L2.312|
000116  7830              LDRB     r0,[r6,#0]            ;142  ; EPindex
000118  eb050080          ADD      r0,r5,r0,LSL #2       ;142
00011c  f8d01c00          LDR      r1,[r0,#0xc00]        ;142
000120  b289              UXTH     r1,r1                 ;142
000122  ea01010b          AND      r1,r1,r11             ;142
000126  f8c01c00          STR      r1,[r0,#0xc00]        ;142
00012a  480b              LDR      r0,|L2.344|
00012c  7831              LDRB     r1,[r6,#0]            ;145  ; EPindex
00012e  eb000081          ADD      r0,r0,r1,LSL #2       ;145
000132  f8500c04          LDR      r0,[r0,#-4]           ;145
000136  4780              BLX      r0                    ;145
                  |L2.312|
000138  f8d50c44          LDR      r0,[r5,#0xc44]        ;57
00013c  4907              LDR      r1,|L2.348|
00013e  8008              STRH     r0,[r1,#0]            ;57
000140  0400              LSLS     r0,r0,#16             ;57
000142  f53faf6b          BMI      |L2.28|
000146  e7a7              B        |L2.152|
;;;152    
                          ENDP

                  |L2.328|
                          DCD      ||.data||
                  |L2.332|
                          DCD      EPindex
                  |L2.336|
                          DCD      0x40005000
                  |L2.340|
                          DCD      pEpInt_OUT
                  |L2.344|
                          DCD      pEpInt_IN
                  |L2.348|
                          DCD      wIstr

                          AREA ||.data||, DATA, ALIGN=1

                  SaveRState
000000  0000              DCB      0x00,0x00
                  SaveTState
000002  0000              DCB      0x00,0x00
