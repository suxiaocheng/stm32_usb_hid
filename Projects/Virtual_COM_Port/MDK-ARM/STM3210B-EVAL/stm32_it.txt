; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\STM3210B-EVAL\stm32_it.o --depend=.\STM3210B-EVAL\stm32_it.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL --omf_browse=.\STM3210B-EVAL\stm32_it.crf ..\src\stm32_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;93     *******************************************************************************/
;;;94     void BusFault_Handler(void)
000000  e7fe              B        BusFault_Handler
;;;95     {
;;;96       /* Go to infinite loop when Bus Fault exception occurs */
;;;97       while (1)
;;;98       {
;;;99       }
;;;100    }
;;;101    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;134    *******************************************************************************/
;;;135    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;136    {
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;63     *******************************************************************************/
;;;64     void HardFault_Handler(void)
000000  e7fe              B        HardFault_Handler
;;;65     {
;;;66       /* Go to infinite loop when Hard Fault exception occurs */
;;;67       while (1)
;;;68       {
;;;69       }
;;;70     }
;;;71     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;78     *******************************************************************************/
;;;79     void MemManage_Handler(void)
000000  e7fe              B        MemManage_Handler
;;;80     {
;;;81       /* Go to infinite loop when Memory Manage exception occurs */
;;;82       while (1)
;;;83       {
;;;84       }
;;;85     }
;;;86     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;52     *******************************************************************************/
;;;53     void NMI_Handler(void)
000000  4770              BX       lr
;;;54     {
;;;55     }
;;;56     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;145    *******************************************************************************/
;;;146    void PendSV_Handler(void)
000000  4770              BX       lr
;;;147    {
;;;148    }
;;;149    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;123    *******************************************************************************/
;;;124    void SVC_Handler(void)
000000  4770              BX       lr
;;;125    {
;;;126    }
;;;127    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;156    *******************************************************************************/
;;;157    void SysTick_Handler(void)
000000  4770              BX       lr
;;;158    {
;;;159    }
;;;160    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;184    *******************************************************************************/
;;;185    void EVAL_COM1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;186    {
;;;187      if (USART_GetITStatus(EVAL_COM1, USART_IT_RXNE) != RESET)
000002  4c0a              LDR      r4,|L9.44|
000004  f2405125          MOV      r1,#0x525
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b108              CBZ      r0,|L9.20|
;;;188      {
;;;189        /* Send the received data to the PC Host*/
;;;190        USART_To_USB_Send_Data();
000010  f7fffffe          BL       USART_To_USB_Send_Data
                  |L9.20|
;;;191      }
;;;192    
;;;193      /* If overrun condition occurs, clear the ORE flag and recover communication */
;;;194      if (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_ORE) != RESET)
000014  2108              MOVS     r1,#8
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USART_GetFlagStatus
00001c  2800              CMP      r0,#0
00001e  d004              BEQ      |L9.42|
;;;195      {
;;;196        (void)USART_ReceiveData(EVAL_COM1);
000020  4620              MOV      r0,r4
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      USART_ReceiveData
                  |L9.42|
;;;197      }
;;;198    }
00002a  bd10              POP      {r4,pc}
;;;199    
                          ENDP

                  |L9.44|
                          DCD      0x40013800

                          AREA ||i.USBWakeUp_IRQHandler||, CODE, READONLY, ALIGN=1

                  USBWakeUp_IRQHandler PROC
;;;210    #else
;;;211    void USBWakeUp_IRQHandler(void)
000000  f44f2080          MOV      r0,#0x40000
;;;212    #endif
;;;213    {
;;;214      EXTI_ClearITPendingBit(EXTI_Line18);
000004  f7ffbffe          B.W      EXTI_ClearITPendingBit
;;;215    }
;;;216    
                          ENDP


                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;171    #else
;;;172    void USB_LP_CAN1_RX0_IRQHandler(void)
000000  f7ffbffe          B.W      USB_Istr
;;;173    #endif
;;;174    {
;;;175      USB_Istr();
;;;176    }
;;;177    
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;108    *******************************************************************************/
;;;109    void UsageFault_Handler(void)
000000  e7fe              B        UsageFault_Handler
;;;110    {
;;;111      /* Go to infinite loop when Usage Fault exception occurs */
;;;112      while (1)
;;;113      {
;;;114      }
;;;115    }
;;;116    
                          ENDP

